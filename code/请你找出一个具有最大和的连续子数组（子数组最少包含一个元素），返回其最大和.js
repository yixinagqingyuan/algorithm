/** @format */

//最大子数组和
//给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
//输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
//输出：6
//解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。

// 这一题很好搞，动态规划

const MaxSubSum3 = (nums) => {
  // 这一道题用动态规划开始，我应该怎么做呢？
  // 首先高动态规划得有 dp，然后因为你要求最大值，还要有 max
  let dp, max
  for (let i = 0; i < nums.length; i++) {
    // 然后我们就要干什么事情呢，就是要求 dp每一个层级 dp 里头的值，但是这值因为你要求最大值啊，所以要跟 0 去做一个最比
    // 如果都比 0 小了当然要从 0 开始啊，相当于从头开始排列
    dp = Math.max(dp, 0) + nums[i]
    // 然后就要在所有 dp 里头找到最大值
    max = Math.max(max, dp)
  }
  return max
}
