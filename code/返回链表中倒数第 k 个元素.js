/** @format */

//实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。

const findhead = (head, k) => {
  // 这个题的思路是快慢指针的思路，也就是说，我们需要怎么做呢？ 很简单，我们不是倒数第 k 个吗？
  // 然后由于倒数第 k 个 也就是我给倒数第 k 个倒过来，正数第 k 个，开始数数，这样的话， 剩下的不就是我们走到倒数第 k 个需要走的数吗
  // 相当于啥呢，你不是倒数 k 个吗，我我给你前面多少个，你不知道，所以呢，我就平移大法，我不需要知道你到底有多少个，我就平移 k 个
  // 这样 k 就从头开始数了。这样的话我虽然还是不知道前面 有多少，但是我能遍历第一个遍历到最后，第二个指针跟着走，就能求出来倒数 k 个前面的是啥
  // 我们开始
  let fast = head
  let slow = head
  // 我们先让快指针走 k 步
  for (let i = 0; i < k; i++) {
    fast = fast.next
  }
  while (fast) {
    fast = fast.next
    slow = slow.next
  }
  return slow
}
