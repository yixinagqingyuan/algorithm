import comp from "/Users/a58/2023/algorithm/docs/.vuepress/.temp/pages/review/DesignPatterns.html.vue"
const data = JSON.parse("{\"path\":\"/review/DesignPatterns.html\",\"title\":\"设计模式热门考题\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"1、请用一句话概括，什么是设计模式？为什么要用？\",\"slug\":\"_1、请用一句话概括-什么是设计模式-为什么要用\",\"link\":\"#_1、请用一句话概括-什么是设计模式-为什么要用\",\"children\":[]},{\"level\":2,\"title\":\"2、谈谈你了解的最常见的几种设计模式，说说他们的应用场景\",\"slug\":\"_2、谈谈你了解的最常见的几种设计模式-说说他们的应用场景\",\"link\":\"#_2、谈谈你了解的最常见的几种设计模式-说说他们的应用场景\",\"children\":[{\"level\":3,\"title\":\"1. 单例模式（Singleton Pattern）\",\"slug\":\"_1-单例模式-singleton-pattern\",\"link\":\"#_1-单例模式-singleton-pattern\",\"children\":[]},{\"level\":3,\"title\":\"2. 工厂模式（Factory Pattern）\",\"slug\":\"_2-工厂模式-factory-pattern\",\"link\":\"#_2-工厂模式-factory-pattern\",\"children\":[]},{\"level\":3,\"title\":\"3. 策略模式（Strategy Pattern）\",\"slug\":\"_3-策略模式-strategy-pattern\",\"link\":\"#_3-策略模式-strategy-pattern\",\"children\":[]},{\"level\":3,\"title\":\"4. 观察者模式（Observer Pattern）\",\"slug\":\"_4-观察者模式-observer-pattern\",\"link\":\"#_4-观察者模式-observer-pattern\",\"children\":[]},{\"level\":3,\"title\":\"5. 代理模式（Proxy Pattern）\",\"slug\":\"_5-代理模式-proxy-pattern\",\"link\":\"#_5-代理模式-proxy-pattern\",\"children\":[]},{\"level\":3,\"title\":\"6. 装饰器模式（Decorator Pattern）\",\"slug\":\"_6-装饰器模式-decorator-pattern\",\"link\":\"#_6-装饰器模式-decorator-pattern\",\"children\":[]},{\"level\":3,\"title\":\"7. 适配器模式（Adapter Pattern）\",\"slug\":\"_7-适配器模式-adapter-pattern\",\"link\":\"#_7-适配器模式-adapter-pattern\",\"children\":[]},{\"level\":3,\"title\":\"8. 模板方法模式（Template Method Pattern）\",\"slug\":\"_8-模板方法模式-template-method-pattern\",\"link\":\"#_8-模板方法模式-template-method-pattern\",\"children\":[]},{\"level\":3,\"title\":\"9. 命令模式（Command Pattern）\",\"slug\":\"_9-命令模式-command-pattern\",\"link\":\"#_9-命令模式-command-pattern\",\"children\":[]},{\"level\":3,\"title\":\"10. 中介者模式（Mediator Pattern）\",\"slug\":\"_10-中介者模式-mediator-pattern\",\"link\":\"#_10-中介者模式-mediator-pattern\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}]},{\"level\":2,\"title\":\"3、什么是策略模式？一般用在什么场景？\",\"slug\":\"_3、什么是策略模式-一般用在什么场景\",\"link\":\"#_3、什么是策略模式-一般用在什么场景\",\"children\":[{\"level\":3,\"title\":\"什么是策略模式？（在 JavaScript 中）\",\"slug\":\"什么是策略模式-在-javascript-中\",\"link\":\"#什么是策略模式-在-javascript-中\",\"children\":[]},{\"level\":3,\"title\":\"策略模式的结构\",\"slug\":\"策略模式的结构\",\"link\":\"#策略模式的结构\",\"children\":[]},{\"level\":3,\"title\":\"策略模式在 JavaScript 中的应用场景\",\"slug\":\"策略模式在-javascript-中的应用场景\",\"link\":\"#策略模式在-javascript-中的应用场景\",\"children\":[]},{\"level\":3,\"title\":\"策略模式示例代码\",\"slug\":\"策略模式示例代码\",\"link\":\"#策略模式示例代码\",\"children\":[]},{\"level\":3,\"title\":\"策略模式的优点\",\"slug\":\"策略模式的优点\",\"link\":\"#策略模式的优点\",\"children\":[]},{\"level\":3,\"title\":\"策略模式的缺点\",\"slug\":\"策略模式的缺点\",\"link\":\"#策略模式的缺点\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-1\",\"link\":\"#总结-1\",\"children\":[]}]},{\"level\":2,\"title\":\"4、请描述简单工厂模式的工作原理。\",\"slug\":\"_4、请描述简单工厂模式的工作原理。\",\"link\":\"#_4、请描述简单工厂模式的工作原理。\",\"children\":[{\"level\":3,\"title\":\"什么是简单工厂模式？\",\"slug\":\"什么是简单工厂模式\",\"link\":\"#什么是简单工厂模式\",\"children\":[]},{\"level\":3,\"title\":\"简单工厂模式的工作原理\",\"slug\":\"简单工厂模式的工作原理\",\"link\":\"#简单工厂模式的工作原理\",\"children\":[]},{\"level\":3,\"title\":\"简单工厂模式的优点\",\"slug\":\"简单工厂模式的优点\",\"link\":\"#简单工厂模式的优点\",\"children\":[]},{\"level\":3,\"title\":\"简单工厂模式的缺点\",\"slug\":\"简单工厂模式的缺点\",\"link\":\"#简单工厂模式的缺点\",\"children\":[]},{\"level\":3,\"title\":\"简单工厂模式的实现（JavaScript 示例）\",\"slug\":\"简单工厂模式的实现-javascript-示例\",\"link\":\"#简单工厂模式的实现-javascript-示例\",\"children\":[]},{\"level\":3,\"title\":\"应用场景\",\"slug\":\"应用场景\",\"link\":\"#应用场景\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-2\",\"link\":\"#总结-2\",\"children\":[]}]}],\"git\":{\"updatedTime\":1737013072000,\"contributors\":[{\"name\":\"杨永生\",\"email\":\"yangyongsheng@58.com\",\"commits\":1}]},\"filePathRelative\":\"review/DesignPatterns.md\",\"excerpt\":\"<!-- @format -->\\n<h1>设计模式热门考题</h1>\\n<h2>1、请用一句话概括，什么是设计模式？为什么要用？</h2>\\n<p><strong>设计模式</strong>是总结和提炼出的一套可复用的解决方案，用于应对软件开发中常见的设计问题，<strong>目的是提高代码的可维护性、可扩展性和重用性，同时降低开发难度和耦合度</strong>。</p>\\n<h2>2、谈谈你了解的最常见的几种设计模式，说说他们的应用场景</h2>\\n<p>以下是几种常见的设计模式及其应用场景：</p>\\n<hr>\\n<h3><strong>1. 单例模式（Singleton Pattern）</strong></h3>\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
