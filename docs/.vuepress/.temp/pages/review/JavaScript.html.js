import comp from "/Users/a58/2023/algorithm/docs/.vuepress/.temp/pages/review/JavaScript.html.vue"
const data = JSON.parse("{\"path\":\"/review/JavaScript.html\",\"title\":\"javascript\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"1、为什么 JavaScript 中 0.1 + 0.2 !== 0.3，如何让其相等？\",\"slug\":\"_1、为什么-javascript-中-0-1-0-2-0-3-如何让其相等\",\"link\":\"#_1、为什么-javascript-中-0-1-0-2-0-3-如何让其相等\",\"children\":[{\"level\":3,\"title\":\"为什么 0.1 + 0.2 !== 0.3？\",\"slug\":\"为什么-0-1-0-2-0-3\",\"link\":\"#为什么-0-1-0-2-0-3\",\"children\":[]},{\"level\":3,\"title\":\"如何让 0.1 + 0.2 === 0.3？\",\"slug\":\"如何让-0-1-0-2-0-3\",\"link\":\"#如何让-0-1-0-2-0-3\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}]},{\"level\":2,\"title\":\"2、typeof 和 instanceof 有什么区别？\",\"slug\":\"_2、typeof-和-instanceof-有什么区别\",\"link\":\"#_2、typeof-和-instanceof-有什么区别\",\"children\":[{\"level\":3,\"title\":\"typeof 和 instanceof 的区别\",\"slug\":\"typeof-和-instanceof-的区别\",\"link\":\"#typeof-和-instanceof-的区别\",\"children\":[]},{\"level\":3,\"title\":\"1. typeof 的特点\",\"slug\":\"_1-typeof-的特点\",\"link\":\"#_1-typeof-的特点\",\"children\":[]},{\"level\":3,\"title\":\"2. instanceof 的特点\",\"slug\":\"_2-instanceof-的特点\",\"link\":\"#_2-instanceof-的特点\",\"children\":[]},{\"level\":3,\"title\":\"3. typeof 和 instanceof 的对比\",\"slug\":\"_3-typeof-和-instanceof-的对比\",\"link\":\"#_3-typeof-和-instanceof-的对比\",\"children\":[]},{\"level\":3,\"title\":\"4. 结合使用的示例\",\"slug\":\"_4-结合使用的示例\",\"link\":\"#_4-结合使用的示例\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-1\",\"link\":\"#总结-1\",\"children\":[]}]},{\"level\":2,\"title\":\"3、typeof null 的结果是什么？为什么？\",\"slug\":\"_3、typeof-null-的结果是什么-为什么\",\"link\":\"#_3、typeof-null-的结果是什么-为什么\",\"children\":[{\"level\":3,\"title\":\"typeof null 的结果是什么？\",\"slug\":\"typeof-null-的结果是什么\",\"link\":\"#typeof-null-的结果是什么\",\"children\":[]},{\"level\":3,\"title\":\"为什么 typeof null 返回 'object'？\",\"slug\":\"为什么-typeof-null-返回-object\",\"link\":\"#为什么-typeof-null-返回-object\",\"children\":[]},{\"level\":3,\"title\":\"如何准确判断 null？\",\"slug\":\"如何准确判断-null\",\"link\":\"#如何准确判断-null\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-2\",\"link\":\"#总结-2\",\"children\":[]}]},{\"level\":2,\"title\":\"JavaScript 中 null 和 undefined 的区别是什么？\",\"slug\":\"javascript-中-null-和-undefined-的区别是什么\",\"link\":\"#javascript-中-null-和-undefined-的区别是什么\",\"children\":[{\"level\":3,\"title\":\"null 和 undefined 的区别\",\"slug\":\"null-和-undefined-的区别\",\"link\":\"#null-和-undefined-的区别\",\"children\":[]},{\"level\":3,\"title\":\"1. 定义\",\"slug\":\"_1-定义\",\"link\":\"#_1-定义\",\"children\":[]},{\"level\":3,\"title\":\"2. 语法上的区别\",\"slug\":\"_2-语法上的区别\",\"link\":\"#_2-语法上的区别\",\"children\":[]},{\"level\":3,\"title\":\"3. 使用场景\",\"slug\":\"_3-使用场景\",\"link\":\"#_3-使用场景\",\"children\":[]},{\"level\":3,\"title\":\"4. 比较\",\"slug\":\"_4-比较\",\"link\":\"#_4-比较\",\"children\":[]},{\"level\":3,\"title\":\"5. 常见误区与注意事项\",\"slug\":\"_5-常见误区与注意事项\",\"link\":\"#_5-常见误区与注意事项\",\"children\":[]},{\"level\":3,\"title\":\"6. 总结\",\"slug\":\"_6-总结\",\"link\":\"#_6-总结\",\"children\":[]}]},{\"level\":2,\"title\":\"说说你对 JS 作用域的理解？\",\"slug\":\"说说你对-js-作用域的理解\",\"link\":\"#说说你对-js-作用域的理解\",\"children\":[{\"level\":3,\"title\":\"JavaScript 作用域的理解\",\"slug\":\"javascript-作用域的理解\",\"link\":\"#javascript-作用域的理解\",\"children\":[]},{\"level\":3,\"title\":\"2. 全局作用域（Global Scope）\",\"slug\":\"_2-全局作用域-global-scope\",\"link\":\"#_2-全局作用域-global-scope\",\"children\":[]},{\"level\":3,\"title\":\"3. 函数作用域（Function Scope）\",\"slug\":\"_3-函数作用域-function-scope\",\"link\":\"#_3-函数作用域-function-scope\",\"children\":[]},{\"level\":3,\"title\":\"4. 块级作用域（Block Scope）\",\"slug\":\"_4-块级作用域-block-scope\",\"link\":\"#_4-块级作用域-block-scope\",\"children\":[]},{\"level\":3,\"title\":\"5. 作用域链（Scope Chain）\",\"slug\":\"_5-作用域链-scope-chain\",\"link\":\"#_5-作用域链-scope-chain\",\"children\":[]},{\"level\":3,\"title\":\"6. 闭包（Closure）与作用域\",\"slug\":\"_6-闭包-closure-与作用域\",\"link\":\"#_6-闭包-closure-与作用域\",\"children\":[]},{\"level\":3,\"title\":\"7. var, let 和 const 的作用域区别\",\"slug\":\"_7-var-let-和-const-的作用域区别\",\"link\":\"#_7-var-let-和-const-的作用域区别\",\"children\":[]},{\"level\":3,\"title\":\"8. 垃圾回收与作用域\",\"slug\":\"_8-垃圾回收与作用域\",\"link\":\"#_8-垃圾回收与作用域\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-3\",\"link\":\"#总结-3\",\"children\":[]}]},{\"level\":2,\"title\":\"let、const 和 var 的区别\",\"slug\":\"let、const-和-var-的区别\",\"link\":\"#let、const-和-var-的区别\",\"children\":[{\"level\":3,\"title\":\"let、const 和 var 的区别\",\"slug\":\"let、const-和-var-的区别-1\",\"link\":\"#let、const-和-var-的区别-1\",\"children\":[]},{\"level\":3,\"title\":\"1. 作用域（Scope）\",\"slug\":\"_1-作用域-scope\",\"link\":\"#_1-作用域-scope\",\"children\":[]},{\"level\":3,\"title\":\"2. 变量提升（Hoisting）\",\"slug\":\"_2-变量提升-hoisting\",\"link\":\"#_2-变量提升-hoisting\",\"children\":[]},{\"level\":3,\"title\":\"3. 重新赋值（Reassignment）\",\"slug\":\"_3-重新赋值-reassignment\",\"link\":\"#_3-重新赋值-reassignment\",\"children\":[]},{\"level\":3,\"title\":\"4. 全局对象属性\",\"slug\":\"_4-全局对象属性\",\"link\":\"#_4-全局对象属性\",\"children\":[]},{\"level\":3,\"title\":\"5. 使用场景\",\"slug\":\"_5-使用场景\",\"link\":\"#_5-使用场景\",\"children\":[]},{\"level\":3,\"title\":\"6. 总结对比表\",\"slug\":\"_6-总结对比表\",\"link\":\"#_6-总结对比表\",\"children\":[]},{\"level\":3,\"title\":\"7. 推荐使用\",\"slug\":\"_7-推荐使用\",\"link\":\"#_7-推荐使用\",\"children\":[]}]},{\"level\":2,\"title\":\"️ES6 箭头函数能当构造函数吗？\",\"slug\":\"️es6-箭头函数能当构造函数吗\",\"link\":\"#️es6-箭头函数能当构造函数吗\",\"children\":[{\"level\":3,\"title\":\"ES6 箭头函数能当构造函数吗？\",\"slug\":\"es6-箭头函数能当构造函数吗\",\"link\":\"#es6-箭头函数能当构造函数吗\",\"children\":[]},{\"level\":3,\"title\":\"1. 为什么箭头函数不能作为构造函数？\",\"slug\":\"_1-为什么箭头函数不能作为构造函数\",\"link\":\"#_1-为什么箭头函数不能作为构造函数\",\"children\":[]},{\"level\":3,\"title\":\"2. 示例：箭头函数不能作为构造函数\",\"slug\":\"_2-示例-箭头函数不能作为构造函数\",\"link\":\"#_2-示例-箭头函数不能作为构造函数\",\"children\":[]},{\"level\":3,\"title\":\"3. 如何定义可以作为构造函数的函数？\",\"slug\":\"_3-如何定义可以作为构造函数的函数\",\"link\":\"#_3-如何定义可以作为构造函数的函数\",\"children\":[]},{\"level\":3,\"title\":\"4. 总结\",\"slug\":\"_4-总结\",\"link\":\"#_4-总结\",\"children\":[]}]},{\"level\":2,\"title\":\"ES6 箭头函数和普通函数有什么区别？\",\"slug\":\"es6-箭头函数和普通函数有什么区别\",\"link\":\"#es6-箭头函数和普通函数有什么区别\",\"children\":[{\"level\":3,\"title\":\"总结表格\",\"slug\":\"总结表格\",\"link\":\"#总结表格\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-4\",\"link\":\"#总结-4\",\"children\":[]}]}],\"git\":{\"updatedTime\":1736587243000,\"contributors\":[{\"name\":\"杨永生\",\"email\":\"yangyongsheng@58.com\",\"commits\":3}]},\"filePathRelative\":\"review/JavaScript.md\",\"excerpt\":\"<!-- @format -->\\n<h1>javascript</h1>\\n<h2>1、为什么 JavaScript 中 0.1 + 0.2 !== 0.3，如何让其相等？</h2>\\n<h3><strong>为什么 <code>0.1 + 0.2 !== 0.3</code>？</strong></h3>\\n<h4><strong>1. 原因：浮点数精度问题</strong></h4>\\n<p>在 JavaScript 中，数字是以 <strong>64 位双精度浮点数</strong>（遵循 IEEE 754 标准）表示的。这种表示方法导致某些十进制小数在二进制中无法精确表示。</p>\\n<ul>\\n<li>\\n<p><strong>浮点数表示：</strong></p>\\n<ul>\\n<li>在十进制中，<code>0.1</code> 和 <code>0.2</code> 是有限的小数。</li>\\n<li>在二进制中，<code>0.1</code> 和 <code>0.2</code> 是无限循环小数，存储时会被截断为有限位数。</li>\\n</ul>\\n<p>例如：</p>\\n<ul>\\n<li><code>0.1</code> 的二进制近似值为：<code>0.0001100110011001100110011001100110011001100110011</code>...</li>\\n<li><code>0.2</code> 的二进制近似值为：<code>0.001100110011001100110011001100110011001100110011</code>...</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>加法时的精度丢失：</strong></p>\\n<ul>\\n<li>当 <code>0.1</code> 和 <code>0.2</code> 的近似值相加时，结果不是精确的 <code>0.3</code>，而是一个非常接近 <code>0.3</code> 的值：<code>0.30000000000000004</code>。</li>\\n</ul>\\n</li>\\n</ul>\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
