import comp from "/Users/a58/2023/algorithm/docs/.vuepress/.temp/pages/review/browser.html.vue"
const data = JSON.parse("{\"path\":\"/review/browser.html\",\"title\":\"浏览器热门考题\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"1、说说你对 fetch 的理解，它有哪些优点和不足？\",\"slug\":\"_1、说说你对-fetch-的理解-它有哪些优点和不足\",\"link\":\"#_1、说说你对-fetch-的理解-它有哪些优点和不足\",\"children\":[{\"level\":3,\"title\":\"fetch 的理解\",\"slug\":\"fetch-的理解\",\"link\":\"#fetch-的理解\",\"children\":[]},{\"level\":3,\"title\":\"优点\",\"slug\":\"优点\",\"link\":\"#优点\",\"children\":[]},{\"level\":3,\"title\":\"不足\",\"slug\":\"不足\",\"link\":\"#不足\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}]},{\"level\":2,\"title\":\"2、Cookie、Session、Token 之间有什么区别？\",\"slug\":\"_2、cookie、session、token-之间有什么区别\",\"link\":\"#_2、cookie、session、token-之间有什么区别\",\"children\":[{\"level\":3,\"title\":\"1. Cookie\",\"slug\":\"_1-cookie\",\"link\":\"#_1-cookie\",\"children\":[]},{\"level\":3,\"title\":\"2. Session\",\"slug\":\"_2-session\",\"link\":\"#_2-session\",\"children\":[]},{\"level\":3,\"title\":\"3. Token\",\"slug\":\"_3-token\",\"link\":\"#_3-token\",\"children\":[]},{\"level\":3,\"title\":\"关键区别：\",\"slug\":\"关键区别\",\"link\":\"#关键区别\",\"children\":[]},{\"level\":3,\"title\":\"使用场景：\",\"slug\":\"使用场景\",\"link\":\"#使用场景\",\"children\":[]}]},{\"level\":2,\"title\":\"3、cookie localstorage sessionstorage 区别\",\"slug\":\"_3、cookie-localstorage-sessionstorage-区别\",\"link\":\"#_3、cookie-localstorage-sessionstorage-区别\",\"children\":[{\"level\":3,\"title\":\"1. Cookie\",\"slug\":\"_1-cookie-1\",\"link\":\"#_1-cookie-1\",\"children\":[]},{\"level\":3,\"title\":\"2. LocalStorage\",\"slug\":\"_2-localstorage\",\"link\":\"#_2-localstorage\",\"children\":[]}]},{\"level\":2,\"title\":\"4、说一下浏览器缓存机制？\",\"slug\":\"_4、说一下浏览器缓存机制\",\"link\":\"#_4、说一下浏览器缓存机制\",\"children\":[{\"level\":3,\"title\":\"1. 强缓存（Strong Cache）\",\"slug\":\"_1-强缓存-strong-cache\",\"link\":\"#_1-强缓存-strong-cache\",\"children\":[]},{\"level\":3,\"title\":\"2. 协商缓存（Conditional Cache）\",\"slug\":\"_2-协商缓存-conditional-cache\",\"link\":\"#_2-协商缓存-conditional-cache\",\"children\":[]},{\"level\":3,\"title\":\"3. 缓存的工作流程\",\"slug\":\"_3-缓存的工作流程\",\"link\":\"#_3-缓存的工作流程\",\"children\":[]},{\"level\":3,\"title\":\"4. 缓存的清理与失效\",\"slug\":\"_4-缓存的清理与失效\",\"link\":\"#_4-缓存的清理与失效\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结-1\",\"link\":\"#总结-1\",\"children\":[]}]}],\"git\":{\"updatedTime\":1737013072000,\"contributors\":[{\"name\":\"杨永生\",\"email\":\"yangyongsheng@58.com\",\"commits\":4}]},\"filePathRelative\":\"review/browser.md\",\"excerpt\":\"<!-- @format -->\\n<h1>浏览器热门考题</h1>\\n<h2>1、说说你对 fetch 的理解，它有哪些优点和不足？</h2>\\n<h3><strong><code>fetch</code> 的理解</strong></h3>\\n<p><code>fetch</code> 是现代浏览器提供的一种用于进行 HTTP 请求的原生 JavaScript API，它比 <code>XMLHttpRequest</code>（XHR）更加简洁、灵活、支持 Promise，并且可以更方便地进行异步编程。<code>fetch</code> 提供了一种更为现代的方式来处理网络请求，它基于 Promise，能更好地与 <code>async</code>/<code>await</code> 配合使用。</p>\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
